{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport './PriceConverter.sol';\r\nimport '@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol';\r\n\r\nerror NotOwner();\r\n\r\ncontract FundMe {\r\n\tusing PriceConverter for uint256;\r\n\tAggregatorV3Interface priceFeed;\r\n\r\n\tmapping(address => uint256) public addressToAmountFunded;\r\n\taddress[] public funders;\r\n\r\n\t// Could we make this constant?  /* hint: no! We should make it immutable! */\r\n\taddress public owner;\r\n\tuint256 public constant MINIMUM_USD = 50 * 10 ** 18;\r\n\r\n\tconstructor(address priceFeedAddress) {\r\n\t\towner = msg.sender;\r\n\t\tpriceFeed = AggregatorV3Interface(priceFeedAddress);\r\n\t}\r\n\r\n\tfunction fund() public payable {\r\n\t\trequire(\r\n\t\t\tmsg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\r\n\t\t\t'You need to spend more ETH!'\r\n\t\t);\r\n\r\n\t\taddressToAmountFunded[msg.sender] += msg.value;\r\n\t\tfunders.push(msg.sender);\r\n\t}\r\n\r\n\tfunction getVersion() public view returns (uint256) {\r\n\t\t// ETH/USD price feed address of Sepolia Network.\r\n\t\treturn priceFeed.version();\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\t// require(msg.sender == owner);\r\n\t\tif (msg.sender != owner) revert NotOwner();\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction withdraw() public onlyOwner {\r\n\t\tfor (\r\n\t\t\tuint256 funderIndex = 0;\r\n\t\t\tfunderIndex < funders.length;\r\n\t\t\tfunderIndex++\r\n\t\t) {\r\n\t\t\taddress funder = funders[funderIndex];\r\n\t\t\taddressToAmountFunded[funder] = 0;\r\n\t\t}\r\n\t\tfunders = new address[](0);\r\n\r\n\t\t(bool callSuccess, ) = payable(msg.sender).call{\r\n\t\t\tvalue: address(this).balance\r\n\t\t}('');\r\n\t\trequire(callSuccess, 'Call failed');\r\n\t}\r\n\r\n\tfallback() external payable {\r\n\t\tfund();\r\n\t}\r\n\r\n\treceive() external payable {\r\n\t\tfund();\r\n\t}\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\nimport '@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol';\r\n\r\nlibrary PriceConverter {\r\n\t// 1000000000\r\n\tfunction getConversionRate(\r\n\t\tuint256 ethAmount,\r\n\t\tAggregatorV3Interface priceFeed\r\n\t) internal view returns (uint256) {\r\n\t\t(, int256 answer, , , ) = priceFeed.latestRoundData();\r\n\t\tuint256 ethPrice = uint256(answer * 10000000000);\r\n\t\tuint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\r\n\t\t// or (Both will do the same thing)\r\n\t\t// uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\r\n\t\t// the actual ETH/USD conversion rate, after adjusting the extra 0s.\r\n\t\treturn ethAmountInUsd;\r\n\t}\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}